# Task ID: 3
# Title: Canvas Renderer: NeuralWarpCanvas Implementation
# Status: in-progress
# Dependencies: 2
# Priority: high
# Description: Develop the high-performance HTML5 Canvas renderer for neural nodes, particles, connections, and all animation effects, supporting all animation phases and adaptive quality.
# Details:
In NeuralWarpCanvas.tsx, use the Canvas 2D API. Implement batch rendering, offscreen canvas for blur, and adaptive quality based on device detection. Use requestAnimationFrame for smooth updates. Support all animation phases, motion blur, glow, and flash effects. Optimize for 60fps on desktop and 30fps on mobile. Use devicePixelRatio for crisp rendering. Fallback to SimpleFadeTransition if Canvas is unsupported.

# Test Strategy:
Write unit tests for rendering logic (mocking Canvas context), and integration tests to verify correct rendering of nodes, particles, and effects for each phase. Use Playwright for visual regression snapshots.

# Subtasks:
## 1. Set Up Canvas 2D Context and Rendering Pipeline [done]
### Dependencies: None
### Description: Initialize the Canvas 2D context in NeuralWarpCanvas.tsx and establish the main rendering loop using requestAnimationFrame.
### Details:
Create and reference the <canvas> element, obtain the 2D rendering context, and set up the main animation loop. Structure the rendering pipeline to support drawing neural nodes, particles, and connections. Ensure the pipeline is modular to allow for future animation phase integration.
<info added on 2025-10-22T17:13:04.399Z>
âœ… COMPLETED: Canvas 2D context and rendering pipeline fully implemented!

Implemented Features:
âœ… Canvas initialization with 2D context (alpha: false, desynchronized: true for performance)
âœ… Main rendering loop with 5 steps:
   1. Clear canvas with slate-950 background
   2. Render connections between nodes
   3. Render particles with motion blur
   4. Render nodes with glow effects
   5. Apply phase-specific effects (flash)

âœ… Three rendering functions:
   - renderConnections(): Lines from satellites to center node, fade out during convergence
   - renderParticles(): Purple particles with glow + motion blur trails
   - renderNodes(): Cyan/blue nodes with radial gradients and glow

âœ… Performance optimizations:
   - Opaque background (no alpha channel)
   - Desynchronized rendering
   - Batch rendering of similar elements
   - Context state management

The animation pipeline is ready and will be triggered by the animation hook!
</info added on 2025-10-22T17:13:04.399Z>
<info added on 2025-10-22T18:23:11.792Z>
âœ… FINAL UPDATE - CINEMA QUALITY HYPERSPACE COMPLETE!

The canvas rendering has been upgraded to NEXT-LEVEL quality:

ðŸŽ¬ **Implemented Features:**
1. **Star Wars Hyperspace Jump Effect** - 2500 hyperspace stars with:
   - Z-depth perspective projection
   - Stars-to-lines transformation at high speed
   - Chromatic aberration at max speed (RGB channel split)
   - Realistic star sizes (70% small, 20% medium, 10% large)
   - Astronomically accurate colors (white/blue-white, bright blue, yellow/orange, red)
   - Twinkling effect with varied speeds
   - Uniform distribution across screen

2. **5-Layer Cinematic Starfield** during slow-motion:
   - Layer 1: 8 nebula clouds (purple/blue/magenta volumetric mist)
   - Layer 2: 300 distant stars (parallax depth effect)
   - Layer 3: 400 mid-distance stars (color variety)
   - Layer 4: 150 close bright stars (multi-layer glow + clusters)
   - Layer 5: 5 aurora-like trails (atmospheric cyan/purple waves)

3. **Advanced Visual Effects:**
   - Chromatic aberration at speed > 80 (red/blue channel offset)
   - Multi-layer glow for large stars (outer glow + bright core)
   - Screen blending mode for aurora trails
   - Tunnel vortex rings during high speed
   - Camera shake at max speed
   - Nebula background with animated gradients

4. **Realistic Star Rendering:**
   - Small stars: Sharp square pixels (scherpe sterren)
   - Large stars: Soft glow + bright white core
   - Varied sizes and brightness levels
   - Time-based twinkling animation

5. **Extended Timing (5 seconds total):**
   - 0-0.4s: Activation (gentle start)
   - 0.4-1.75s: Convergence (acceleratie)
   - 1.75-2.5s: Implosion (MAX SPEED + chromatic aberration!)
   - 2.5-4s: Slow-motion (1.5s! - layered starfield fade-in)
   - 4-5s: Materialization (full cinematic starfield + sphere fade-in)

**Total Stars:** 2500 hyperspace + 850 static starfield = 3350 stars!

The effect is now truly **cinema-quality** with realistic nebula, depth layers, chromatic aberration, and aurora trails. Performance remains excellent with optimized rendering!
</info added on 2025-10-22T18:23:11.792Z>

## 2. Implement Batch Rendering and Offscreen Blur Effects [pending]
### Dependencies: 3.1
### Description: Optimize rendering by batching draw calls and using offscreen canvas for blur and glow effects.
### Details:
Group similar draw operations (e.g., nodes, particles) into single paths or batch drawImage calls to minimize context state changes and improve performance[1][3][7]. Use an offscreen canvas to pre-render blurred/glowing sprites, then composite them onto the main canvas. Ensure compatibility with both main-thread and worker-based OffscreenCanvas where supported[1][6].

## 3. Support All Animation Phases and Effects [pending]
### Dependencies: 3.2
### Description: Implement logic to handle all animation phases, including motion blur, glow, and flash effects.
### Details:
Define and manage animation phases (e.g., entry, convergence, spiral, flash). Integrate phase-specific rendering logic into the pipeline, ensuring smooth transitions and correct effect application. Use helper utilities for motion blur and flash as needed.

## 4. Implement Adaptive Quality Logic Based on Device Detection [pending]
### Dependencies: 3.3
### Description: Dynamically adjust rendering quality and frame rate based on device capabilities and performance.
### Details:
Detect device type, performance, and capabilities (e.g., mobile vs. desktop, hardware concurrency). Adjust parameters such as particle count, effect resolution, and target frame rate (60fps desktop, 30fps mobile). Expose adaptive quality settings for future tuning.

## 5. Handle devicePixelRatio and Fallback to SimpleFadeTransition [pending]
### Dependencies: 3.4
### Description: Ensure crisp rendering on high-DPI screens and provide fallback for unsupported Canvas environments.
### Details:
Scale canvas dimensions and drawing operations by window.devicePixelRatio for sharp visuals. Detect Canvas support and, if unavailable, render the SimpleFadeTransition fallback. Ensure seamless user experience across all supported and unsupported environments.

## 6. Write Unit, Integration, and Visual Regression Tests [pending]
### Dependencies: 3.5
### Description: Develop comprehensive tests to ensure correctness, performance, and visual fidelity of the renderer.
### Details:
Write unit tests for rendering logic and helpers (mocking Canvas context). Create integration tests to verify correct rendering of nodes, particles, and effects for each animation phase. Use Playwright for visual regression snapshots to catch rendering regressions.

